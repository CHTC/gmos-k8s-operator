apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{.ObjectMeta.Name}}-prometheus"
  namespace: "{{.ObjectMeta.Namespace}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/created-by: controller-manager
      app.kubernetes.io/instance: "{{.ObjectMeta.Name}}"
      app.kubernetes.io/name: GlideinSetCollection
      gmos.chtc.wisc.edu/app: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/created-by: controller-manager
        app.kubernetes.io/instance: "{{.ObjectMeta.Name}}"
        app.kubernetes.io/name: GlideinSetCollection
        gmos.chtc.wisc.edu/app: prometheus
    spec:
      containers:
      - args:
        - --config.file=/etc/prometheus/prometheus.yaml
        - --storage.tsdb.path=/prometheus/
        image: prom/prometheus
        imagePullPolicy: IfNotPresent
        name: prometheus
        ports:
        - containerPort: 9090
          protocol: TCP
        resources: {}
        volumeMounts:
        - mountPath: /etc/prometheus
          name: prometheus-config
        {{- if .Spec.Prometheus.StorageVolume }}
        - mountPath: /prometheus/
          name: prometheus-storage
        {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccountName: "{{ .Spec.Prometheus.ServiceAccount }}"
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: "{{.ObjectMeta.Name}}-prometheus"
        name: prometheus-config
      {{- with .Spec.Prometheus.StorageVolume }}
      - name: prometheus-storage
        {{ toYaml . | nindent 8 }}
      {{- end }}
